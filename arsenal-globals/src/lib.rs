use strum_macros::EnumString;
use serde_derive::{Serialize, Deserialize};

#[derive(Debug, EnumString, Clone, Copy)]
pub enum Instructions {
    NoOperation,
    Halt,
    SysCall,
    LoadRegisterByte,
    LoadRegisterShort,
    LoadRegisterInt,
    LoadRegisterLong,
    AddRegistersByte,
    AddRegistersShort,
    AddRegistersInt,
    AddRegistersLong,
    SubtractRegistersByte,
    SubtractRegistersShort,
    SubtractRegistersInt,
    SubtractRegistersLong,
    AddRegisterImmediateByte,
    AddRegisterImmediateShort,
    AddRegisterImmediateInt,
    AddRegisterImmediateLong,
    SubtractRegisterImmediateByte,
    SubtractRegisterImmediateShort,
    SubtractRegisterImmediateInt,
    SubtractRegisterImmediateLong,
    IncrementRegister,
    DecrementRegister,
    BitwiseAndRegistersByte,
    BitwiseAndRegistersShort,
    BitwiseAndRegistersInt,
    BitwiseAndRegistersLong,
    BitwiseOrRegistersByte,
    BitwiseOrRegistersShort,
    BitwiseOrRegistersInt,
    BitwiseOrRegistersLong,
    BitwiseXOrRegistersByte,
    BitwiseXOrRegistersShort,
    BitwiseXOrRegistersInt,
    BitwiseXOrRegistersLong,
    BitwiseAndRegisterImmediateByte,
    BitwiseAndRegisterImmediateShort,
    BitwiseAndRegisterImmediateInt,
    BitwiseAndRegisterImmediateLong,
    BitwiseOrRegisterImmediateByte,
    BitwiseOrRegisterImmediateShort,
    BitwiseOrRegisterImmediateInt,
    BitwiseOrRegisterImmediateLong,
    BitwiseXOrRegisterImmediateByte,
    BitwiseXOrRegisterImmediateShort,
    BitwiseXOrRegisterImmediateInt,
    BitwiseXOrRegisterImmediateLong,
    BitwiseNotRegisterByte,
    BitwiseNotRegisterShort,
    BitwiseNotRegisterInt,
    BitwiseNotRegisterLong,
    CompareRegisterByte,
    CompareRegisterShort,
    CompareRegisterInt,
    CompareRegisterLong,
    CompareRegisterLiteralByte,
    CompareRegisterLiteralShort,
    CompareRegisterLiteralInt,
    CompareRegisterLiteralLong,
    JumpIfGreaterThan,
    JumpIfZero,
    JumpIfLessThan,
    JumpIfEqualTo,
    JumpTo,
    MoveRegistersByte,
    MoveRegistersShort,
    MoveRegistersInt,
    MoveRegistersLong,
    MoveMemoryRegisterByte,
    MoveMemoryRegisterShort,
    MoveMemoryRegisterInt,
    MoveMemoryRegisterLong,
    MoveRegisterMemoryByte,
    MoveRegisterMemoryShort,
    MoveRegisterMemoryInt,
    MoveRegisterMemoryLong,
    MoveAddressedRegisterRegisterByte,
    MoveAddressedRegisterRegisterShort,
    MoveAddressedRegisterRegisterInt,
    MoveAddressedRegisterRegisterLong,
    MoveRegisterAddressedRegisterByte,
    MoveRegisterAddressedRegisterShort,
    MoveRegisterAddressedRegisterInt,
    MoveRegisterAddressedRegisterLong,
    MoveAddressedRegistersByte,
    MoveAddressedRegistersShort,
    MoveAddressedRegistersInt,
    MoveAddressedRegistersLong,
    PushRegisterByte,
    PushRegisterShort,
    PushRegisterInt,
    PushRegisterLong,
    PopRegisterByte,
    PopRegisterShort,
    PopRegisterInt,
    PopRegisterLong,
    PushMemoryByte,
    PushMemoryShort,
    PushMemoryInt,
    PushMemoryLong,
    PopMemoryByte,
    PopMemoryShort,
    PopMemoryInt,
    PopMemoryLong,

    // nothing after this
    __END__
}

#[derive(Debug, EnumString, Clone, Copy)]
pub enum SysCalls {
    PrintRegister,
    PrintRegisterSigned,
    PrintCString,
    MemoryAllocate,
    MemoryFree,

    // nothing after this
    __END__
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct ArsenalHeader {}
